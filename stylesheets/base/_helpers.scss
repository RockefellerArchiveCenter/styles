// -----------------------------------------------------------------------------
// This file contains CSS helper classes.
// -----------------------------------------------------------------------------

/**
 * Clear inner floats
 */
.clearfix::after {
  clear: both;
  content: '';
  display: table;
}

/**
 * Main content containers and wrapper
 * 1. Use CSS grid to create 12-column grid
 * 2. Use default gutter values for margins
 * 3. Calculate width with gutters
 * 4. Make the container full width without gutters
 * 5. Flexbox wrapper class
 */
.container {
  @include twelve-column-grid; /* 1 */

  margin: 0 $gutters-default; /* 2 */
  width: calc(100% - (#{$gutters-default}) * 2); /* 3 */
}

.container--full-width {
  @include twelve-column-grid; /* 4 */
}

.wrapper { /* 5 */
  display: flex;
  justify-content: center;
}

/**
 * Hide text while making it readable for screen readers
 * 1. Needed in WebKit-based browsers because of an implementation bug;
 *    See: https://code.google.com/p/chromium/issues/detail?id=457146
 */
.hide-text {
  overflow: hidden;
  padding: 0; /* 1 */
  text-indent: 101%;
  white-space: nowrap;
}

.visually-hidden {
  @include visually-hidden;
}

/**
 * Defines classes to show or hide elements based on mixins.
 **/
.hide-on-lg-up {
  @include hide-on-lg-up;
}

.show-on-lg-up {
  @include show-on-lg-up;
}

.show-on-focus {
  @include show-on-focus;
}

/**
* Base class for material icons setting 24px font size and normal line-height.
**/
.material-icon {
  @include material-icon;
}

/**
* Helper classes to adjust icon positions
**/
.material-icon--space-before {
  margin: 0 0 3px 3px;
}

.material-icon--space-after {
  margin: 0 3px 3px 0;
}

/*
* Creates margin and padding utility classes for component layout.
* e.g. .m-r-10 gives margin-right 10 pixels.
* The first letter is "m" or "p" for MARGIN or PADDING
* Second letter is "t", "b", "l", or "r" for TOP, BOTTOM, LEFT, or RIGHT
* Third letter is the number of spacing in pixels. Adjust the amounts generated by
* editing the $spaceamounts variable below.
* 1. Adjust these values to include the pixel amounts needed
*/

$spaceamounts: (5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 75, 100); /* 1 */
$sides: (top, bottom, left, right);

@each $space in $spaceamounts {
  @each $side in $sides {
    .m-#{str-slice($side, 0, 1)}-#{$space} {
      margin-#{$side}: #{$space}px !important;
    }
    .p-#{str-slice($side, 0, 1)}-#{$space} {
      padding-#{$side}: #{$space}px !important;
    }
  }
}
